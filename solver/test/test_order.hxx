// Copyright 2022 PONIO TEAM. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

#pragma once
// autogenerated file

#include <tuple>

#include <doctest/doctest.h>

#include <solver/runge_kutta.hpp>
#include <solver/solver.hpp>

#include "compute_order.hpp"

template <typename rk_t>
void
test_order()
{
    INFO( "test order of ", rk_t::id );
    WARN( check_order( rk_t() ) == doctest::Approx( rk_t::order ).epsilon( 0.05 ) );
}

template <typename rk_tuple, std::size_t... Is>
void
test_order_impl( std::index_sequence<Is...> )
{
    ( ( test_order<typename std::tuple_element<Is, rk_tuple>::type>() ), ... );
}

template <typename rk_tuple>
void
test_order_on()
{
    test_order_impl<rk_tuple>( std::make_index_sequence<std::tuple_size<rk_tuple>::value>() );
}

TEST_CASE( "order::explict_runge_kutta" )
{
    test_order_on<ponio::runge_kutta::erk_tuple<double>>();
}
